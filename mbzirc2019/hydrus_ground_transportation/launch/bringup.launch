<?xml version="1.0"?>
<launch>
  ###########  launch config  ###########
  <arg name="real_machine" default="False" />
  <arg name="simulation" default="True" />
  <arg name="control_mode" default="0" />
  <arg name="estimate_mode"  default= "0" />
  <arg name="headless" default="False" />
  <arg name="ground" default="False" />

  ##########  basic bringup file ########
  <include file="$(find hydrus)/launch/bringup.launch" >
    <arg name="real_machine" value="$(arg real_machine)" />
    <arg name="simulation" value="$(arg simulation)" />
    <arg name="control_mode" value="$(arg control_mode)" />
    <arg name="estimate_mode"  value= "$(arg estimate_mode)" />
    <arg name="type" value="quad" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="worldtype" value="$(find hydrus_ground_transportation)/gazebo_model/world/empty_g.world" if="$(arg ground)"/>
    <arg name="worldtype" value="$(find hydrus_ground_transportation)/gazebo_model/world/empty_a.world" unless="$(arg ground)"/>
    <arg name="direct_model" value="True" />
    <arg name="direct_model_name" value="$(find hydrus_ground_transportation)/robots/ground/hydrus.urdf.xacro" if="$(eval (1 - arg('simulation')) * arg('ground'))"/>
    <arg name="direct_model_name" value="$(find hydrus_ground_transportation)/robots/ground/hydrus.gazebo.xacro" if="$(eval arg('simulation') * arg('ground'))"/>
    <arg name="direct_model_name" value="$(find hydrus_ground_transportation)/robots/aerial/hydrus.urdf.xacro" if="$(eval  (1 - arg('simulation')) * (1 - arg('ground')))"/>
    <arg name="direct_model_name" value="$(find hydrus_ground_transportation)/robots/aerial/hydrus.gazebo.xacro" if="$(eval arg('simulation') * (1 - arg('ground')))"/>
  </include>

  <group unless="$(arg ground)">

    <node pkg="tf" type="static_transform_publisher" name="camera_optical_frame_broadcaster" args="0 0 0 -1.5708 0 -1.5708 downward_camera downward_camera_optical_frame 50" />

    ######### downward camera ##############
    <node name="downward_camera" pkg="usb_cam" type="usb_cam_node" output="screen" if="$(eval arg('real_machine') * (1 - arg('simulation')))">
      <param name="video_device" value="/dev/video3" />  check whether is video3
      <param name="image_width" value="640" />
      <param name="image_height" value="480" />
      <param name="pixel_format" value="yuyv" />
      <param name="camera_frame_id" value="downward_camera" />
      <param name="io_method" value="mmap"/>
      <param name="framerate" value="20"/>
      <param name="camera_info_url" value="file://$(find hydrus_ground_transportation)/config/camera_200_note_type.yaml" />
    </node>

    ######### downward object detection on the air #########
    <include file="$(find aerial_robot_perception)/launch/find_single_color_object.launch"
             if = "$(eval arg('real_machine') + arg('simulation') > 0)" >
      <arg name="contour_area_size" value="0.07"/>
      <arg name="contour_area_margin" value="0.015" />
      <arg name="image_topic" value="/downward_camera/image_raw" />
      <arg name="camera_info_topic" value="/downward_camera/camera_info"/>
    </include>
    ######### searching state machine  #########
    <node name = "aerial_searching" pkg = "hydrus_ground_transportation" type = "aerial_searching.py" output = "screen" />
  </group>

  <group if="$(arg ground)">
    <group if="$(arg simulation)">
      <include file="$(find hydrus_ground_transportation)/launch/single_color_object_detection.launch"> </include>
    </group>
    <group if="$(arg real_machine)">
      <!-- memo
         Problem: Because the Intel Euclid can not do `sudo apt-get upgrade`,
                  so the OpenCV can not be upgraded, and jsk_pcl_ros can not be executed onboard.
                  the throttled cloud is temporarily tranmitted to ground station PC.
         Solution: Use Jetson TX2 instead of Intel Euclid in the future.
      -->
      <include file="$(find aerial_robot_perception)/launch/create_points.launch">
        <arg name="register_image" value="true"/>
        <arg name="rgb_image" value="color/image_raw"/>
        <arg name="depth_image" value="depth/image_raw"/>
        <arg name="rgb_camera_info" value="color/camera_info"/>
        <arg name="depth_camera_info" value="depth/camera_info"/>
        <arg name="output" value="/camera/depth_registered/points_color"/>
        <arg name="create_manager" value="false"/>
        <arg name="manager" value="nodelet_manager"/>
      </include>
      ######### the throttled cloud is tranmitted to ground station PC #########
      <node pkg="topic_tools" type="throttle" name="points_throttle" args="messages /camera/depth_registered/points_color 1">
        <remap from="/camera/depth_registered/points_color_throttle" to="/camera/depth_registered/points_color/throttle"/>
      </node>
    </group>
    <node name = "go_for_marker" pkg = "hydrus_ground_transportation" type = "go_for_marker.py" output = "screen" /> 
  </group>

</launch>
