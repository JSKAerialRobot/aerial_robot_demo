<launch>
  <arg name="config_dir" />
  <arg name="rgb_image_topic" default="rs_d435/color/image_rect_color" />
  <arg name="rgb_camera_info_topic" default="rs_d435/color/camera_info" />
  <arg name="depth_image_topic" default="rs_d435/aligned_depth_to_color/image_raw" />
  <arg name="depth_camera_info_topic" default="rs_d435/aligned_depth_to_color/camera_info" />
  <arg name="point_cloud_topic" default="rs_d435/depth_registered/points"/>
  <arg name="need_voxel_grid" default="false"/>

  <arg name="external_manager" default="false"/>
  <arg name="manager" default="task2_recognition_manager"/>

  <arg name="object_color" />

  <rosparam command="load" file="$(arg config_dir)/ObjectDetection.yaml"/>
  <rosparam command="load" file="$(arg config_dir)/$(arg object_color)/ObjectDetection.yaml"/>
  <rosparam command="load" file="$(arg config_dir)/ChannelDetection.yaml"/>

  <node unless="$(arg external_manager)"
        pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" output="log">
    <remap from="~input" to="$(arg rgb_image_topic)"/>
  </node>

  ### object recognition
  <node pkg="nodelet" type="nodelet" name="hls_color_filter_img" args="load opencv_apps/hls_color_filter $(arg manager)">
    <remap from="image" to="$(arg rgb_image_topic)"/>
    <param name="debug_view" value="false"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="opening_hls_color_filter" args="load jsk_perception/Opening $(arg manager)" output="screen">
    <remap from="~input" to="hls_color_filter_img/image"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="rectangle_detection_color" args="load aerial_robot_perception/RectangleDetection $(arg manager)" output="screen">
    <remap from="~input" to="opening_hls_color_filter/output" />
    <remap from="~rgb_img" to="$(arg rgb_image_topic)" />
    <remap from="~cam_info" to="$(arg rgb_camera_info_topic)" />
  </node>

  <node if="$(arg need_voxel_grid)"
        pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid $(arg manager)" output="log">
    <remap from="~input" to="$(arg point_cloud_topic)" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 10.0
      filter_limit_negative: False
      leaf_size: 0.02
    </rosparam>
  </node>

  <node pkg="nodelet" type="nodelet" name="hsi_color_filter"
        args="load jsk_pcl/HSIColorFilter $(arg manager)" output="log">
    <remap from="~input" to="voxel_grid/output" />

    <rosparam>
      use_indices: false
      keep_organized: true
    </rosparam>
  </node>

  <node pkg="nodelet" type="nodelet" name="euclidean_clustering"
        args="load jsk_pcl/EuclideanClustering $(arg manager)">
    <remap from="~input" to="hsi_color_filter/output" />
    <rosparam>
      tolerance: 0.05
      min_size: 50
    </rosparam>
  </node>

  <node pkg="nodelet" type="nodelet"
        name="cluster_decomposer"
        args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)"
        clear_params="true">
    <remap from="~input" to="voxel_grid/output" />
    <remap from="~target" to="euclidean_clustering/output" />
    <rosparam>
      approximate_sync: true
      align_boxes: true
      align_boxes_with_plane: false
      target_frame_id: hydrus/base_footprint
      sort_by: cloud_size
    </rosparam>
  </node>

  ### channel recognition
  <node pkg="nodelet" type="nodelet" name="depth_distance_filter_channel" args="load aerial_robot_perception/DepthDistanceFilter $(arg manager)" output="screen">
    <remap from="~input" to="$(arg depth_image_topic)" />
  </node>

  <node pkg="nodelet" type="nodelet" name="closing_depth_distance_filter_channel" args="load jsk_perception/Closing $(arg manager)" output="screen">
    <remap from="~input" to="depth_distance_filter_channel/output"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="opening_depth_distance_filter_channel" args="load jsk_perception/Opening $(arg manager)" output="screen">
    <remap from="~input" to="closing_depth_distance_filter_channel/output"/>
  </node>

  <node pkg="nodelet" type="nodelet" name="channel_detection"
        args="load aerial_robot_perception/GroundObjectDetection $(arg manager)" output="screen">
    <remap from="image" to="opening_depth_distance_filter_channel/output" />
    <remap from="camera_info" to="$(arg rgb_camera_info_topic)"/>
  </node>

</launch>
